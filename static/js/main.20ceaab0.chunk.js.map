{"version":3,"sources":["Form/index.js","Tasks/index.js","Buttons/index.js","Main/index.js","Container/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","addNewTask","useState","newTaskContent","setNewTaskContent","className","onSubmit","event","preventDefault","trimNewTask","trim","value","placeholder","onChange","target","Tasks","tasks","hideDone","removeTask","toggleTaskDone","map","task","key","id","done","onClick","content","Buttons","toggleHideDone","setAllDone","length","Fragment","disabled","every","Main","headerH1","headerForm","buttonsHeaderH2","listHeaderH2","paragraphButtons","paragraphList","Container","children","App","setHideDone","setTasks","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.20ceaab0.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = ({ addNewTask }) => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        const trimNewTask = newTaskContent.trim();\r\n\r\n        if (!trimNewTask) {\r\n            return;\r\n        }\r\n\r\n        addNewTask(trimNewTask);\r\n        setNewTaskContent(\"\");\r\n    };\r\n\r\n    return (\r\n        <form\r\n            className=\"form\"\r\n            onSubmit={onFormSubmit}>\r\n            <input\r\n                value={newTaskContent}\r\n                className=\"form__inputField\"\r\n                placeholder=\"Wpisz zadanie\"\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n            />\r\n            <button className=\"form__button\">Dodaj zadanie</button>\r\n        </form>\r\n    )\r\n};\r\n\r\nexport default Form;\r\n\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Tasks = ({tasks, hideDone, removeTask, toggleTaskDone }) => (\r\n    <ul className=\"tasks tasksList\">\r\n        {tasks.map(task => (\r\n            <li \r\n            key={task.id}\r\n            className={`task__item ${task.done && hideDone\r\n                ? \" task__item--hidden\"\r\n                : \"\"}`\r\n                }\r\n                >\r\n\r\n                <button \r\n                onClick={() => toggleTaskDone(task.id)}\r\n                className=\"task__button task__button--toggleCompleted\" \r\n                >\r\n                    {task.done ? \"‚úî\" : \"\"}\r\n                </button>\r\n                <span className={\r\n                    `task__content${task.done ? \" task__content--completed\" : \"\"}`\r\n                }>\r\n                    {task.content}\r\n                </span>\r\n                <button className=\"task__button task__button--delete\"\r\n                 onClick={() => removeTask(task.id)}\r\n                >\r\n                    üóëÔ∏è\r\n                </button>\r\n            </li>\r\n        ))}\r\n    </ul>\r\n);\r\n\r\nexport default Tasks;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone }) => (\r\n    <div className=\"main__toogleTasksButtons\">\r\n        {tasks.length > 0 && (\r\n\r\n            <React.Fragment>\r\n                <button\r\n                    onClick={toggleHideDone}\r\n                    className=\"main__HideAllCompletedTask\">\r\n                    {hideDone ? \"Poka≈º\" : \"Ukryj\"} uko≈Ñczone\r\n                    </button>\r\n                <button\r\n                    onClick={() => setAllDone()}\r\n                    className=\"main__HideAllTasks\"\r\n                    disabled={tasks.every(({ done }) => done)}\r\n                >\r\n                    Zako≈Ñcz wszystkie\r\n        </button>\r\n            </React.Fragment>\r\n        )}\r\n    </div>\r\n\r\n);\r\n\r\n\r\nexport default Buttons;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Main = ({headerH1, headerForm, buttonsHeaderH2, listHeaderH2, paragraphButtons, paragraphList}) => (\r\n\r\n  <div className=\"main\">\r\n    <h1 className=\"main__headerH1\">{headerH1}</h1>\r\n    <h2 className=\"main__headerH2\">{buttonsHeaderH2}</h2>\r\n    {headerForm}\r\n    <div className=\"main__paragraph\">\r\n      <h2 className=\"main__headerH2\">{listHeaderH2}</h2>\r\n      {paragraphButtons}\r\n    </div>\r\n    {paragraphList}\r\n  </div>\r\n);\r\n\r\nexport default Main;\r\n\r\n","import React from \"react\";\r\nimport \"./style.css\"\r\n\r\nconst Container = ({children}) => (\r\n    <main className=\"bodyContainer\">\r\n        {children}\r\n    </main>\r\n);\r\nexport default Container;","import React, { useState } from 'react';\nimport Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport Main from \"./Main\";\nimport Container from \"./Container\";\n\n\nfunction App() {\n  const [hideDone, setHideDone] = useState(false);\n  const [tasks, setTasks] = useState([\n    { id: 1, content: \"przej≈õc na react.js\", done: true },\n    { id: 2, content: \"dodaƒá readme do projektu\", done: false },\n  ]);\n\n  const toggleHideDone = () => {\n    setHideDone(hideDone => !hideDone);\n  };\n  const removeTask = (id) => {\n    setTasks(tasks => tasks.filter(task => task.id !== id));\n  };\n\n  const toggleTaskDone = (id) => {\n    setTasks(tasks => tasks.map(task => {\n      if (task.id === id) {\n        return { ...task, done: !task.done }\n      }\n      return task;\n    }));\n  };\n\n  const setAllDone = () => {\n    setTasks(tasks => tasks.map(task => ({\n      ...task,\n      done: true\n    })));\n  };\n  const addNewTask = (newTaskContent) => {\n    setTasks(tasks => [\n      ...tasks,\n      {\n        content: newTaskContent,\n        done: false,\n        id: tasks.length === 0 ? 1 : tasks[tasks.length - 1].id + 1\n      }\n    ])\n\n  }\n\n\n  return (\n    <Container>\n      <Main\n        headerH1=\"Lista zada≈Ñ\"\n        buttonsHeaderH2=\"Dodaj nowe zadanie\"\n        headerForm={\n          <Form\n            addNewTask={addNewTask}\n          />}\n        paragraphButtons={\n          <Buttons\n            tasks={tasks}\n            hideDone={hideDone}\n            toggleHideDone={toggleHideDone}\n            setAllDone={setAllDone}\n          />}\n        listHeaderH2=\"Lista zada≈Ñ\"\n        paragraphList={\n          <Tasks\n            tasks={tasks}\n            hideDone={hideDone}\n            removeTask={removeTask}\n            toggleTaskDone={toggleTaskDone} />}\n      />\n    </Container>\n\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}