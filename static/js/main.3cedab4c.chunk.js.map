{"version":3,"sources":["Form/index.js","Tasks/index.js","Buttons/index.js","Main/index.js","Container/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","className","Tasks","props","tasks","map","task","done","content","Buttons","hideCompletedTasks","length","Fragment","disabled","every","Main","headerH1","headerForm","buttonsHeaderH2","listHeaderH2","paragraphButtons","paragraphList","Container","children","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qTAOeA,G,UAJF,kBACb,0BAAMC,UAAU,aAAhB,IAA6B,2BAAOA,UAAU,6BAA9C,IAA4E,4BAAQA,UAAU,gBAAlB,kBAA5E,OCaeC,G,MAdD,SAACC,GAAD,OACV,wBAAIF,UAAU,mBACVE,EAAMC,MAAMC,KAAI,SAAAC,GAAI,OACjB,wBAAIL,UAAS,iGAGZ,4BAAQA,UAAU,wDAAyDK,EAAKC,KAAO,SAAM,IAC7F,0BAAMN,UAAS,wBAAoBK,EAAKC,KAAO,2BAA6B,KAA5E,IAAoFD,EAAKE,QAAzF,KACA,4BAAQP,UAAU,gDAAlB,6BCaGQ,G,MArBC,SAAC,GAAD,IAAGL,EAAH,EAAGA,MAAOM,EAAV,EAAUA,mBAAV,OACZ,yBAAKT,UAAU,4BACdG,EAAMO,OAAS,GAER,kBAAC,IAAMC,SAAP,KACI,4BAAQX,UAAU,8BACbS,EAAqB,aAAU,QADpC,mBAGA,4BACIT,UAAU,qBACVY,SAAUT,EAAMU,OAAM,qBAAGP,SAF7B,8BCMDQ,G,MAdF,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAUC,EAAZ,EAAYA,WAAYC,EAAxB,EAAwBA,gBAAiBC,EAAzC,EAAyCA,aAAcC,EAAvD,EAAuDA,iBAAkBC,EAAzE,EAAyEA,cAAzE,OAEX,yBAAKpB,UAAU,QACb,wBAAIA,UAAU,kBAAkBe,GAChC,wBAAIf,UAAU,kBAAkBiB,GAC/BD,EACD,yBAAKhB,UAAU,mBACb,wBAAIA,UAAU,kBAAkBkB,GAC/BC,GAEFC,KCLUC,G,MALG,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAF,OACd,yBAAKtB,UAAU,iBACVsB,KCEHnB,EAAQ,CACZ,CAAEoB,GAAI,EAAGhB,QAAS,2BAAuBD,MAAM,GAC/C,CAAEiB,GAAI,EAAGhB,QAAS,4CAA8BD,MAAM,IAsBzCkB,MAhBf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CACAT,SAAS,mBACTE,gBAAgB,qBAChBD,WAAY,kBAAC,EAAD,MACZG,iBAAkB,kBAAC,EAAD,CAAShB,MAAOA,EAAOM,oBAVpB,IAWrBS,aAAa,mBACbE,cAAe,kBAAC,EAAD,CAAOjB,MAAOA,EAAOM,oBAZf,QCAPgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3cedab4c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = () => (\r\n<form className=\"form form\"> <input className=\"form__inputField newTask\" /> <button className=\"form__button\"> Dodaj\r\nzadanie</button> </form>);\r\n\r\nexport default Form;\r\n\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Tasks = (props) => (\r\n    <ul className=\"tasks tasksList\">\r\n       {props.tasks.map(task => (\r\n           <li className= {`\r\n           task__item {task.done && props.hideCompletedTasks ? \" task__item--hidden\" : \"\"} `}>\r\n\r\n            <button className=\"task__button task__button--toggleCompleted completed\" >{task.done ? \"‚úî\" : \"\"}</button>\r\n            <span className= {`task__content ${task.done ? \"task__content--completed\" : \"\"}`}> {task.content} </span>\r\n            <button className=\"task__button task__button--delete deleteTask\">üóëÔ∏è</button>  \t\t\t\r\n           </li>\r\n       ))}\r\n    </ul>\r\n);\r\n\r\nexport default Tasks;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Buttons = ({ tasks, hideCompletedTasks }) => (\r\n    <div className=\"main__toogleTasksButtons\">\r\n    {tasks.length > 0 && (\r\n    \r\n            <React.Fragment>\r\n                <button className=\"main__HideAllCompletedTask\">\r\n                    {hideCompletedTasks ? \"Poka≈º\" : \"Ukryj\"} uko≈Ñczone\r\n                    </button>\r\n                <button\r\n                    className=\"main__HideAllTasks\"\r\n                    disabled={tasks.every(({ done }) => done)}\r\n                >\r\n                    Zako≈Ñcz wszystkie\r\n        </button>\r\n            </React.Fragment>\r\n            )}\r\n        </div>\r\n    \r\n);\r\n\r\n\r\nexport default Buttons;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Main = ({headerH1, headerForm, buttonsHeaderH2, listHeaderH2, paragraphButtons, paragraphList}) => (\r\n\r\n  <div className=\"main\">\r\n    <h1 className=\"main__headerH1\">{headerH1}</h1>\r\n    <h2 className=\"main__headerH2\">{buttonsHeaderH2}</h2>\r\n    {headerForm}\r\n    <div className=\"main__paragraph\">\r\n      <h2 className=\"main__headerH2\">{listHeaderH2}</h2>\r\n      {paragraphButtons}\r\n    </div>\r\n    {paragraphList}\r\n  </div>\r\n);\r\n\r\nexport default Main;\r\n\r\n","import React from \"react\";\r\nimport \"./style.css\"\r\n\r\nconst Container = ({children}) => (\r\n    <div className=\"bodyContainer\">\r\n        {children}\r\n    </div>\r\n);\r\nexport default Container;","import React from 'react';\nimport Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport Main from \"./Main\";\nimport Container from \"./Container\";\n\nconst tasks = [\n  { id: 1, content: \"przej≈õc na react.js\", done: true },\n  { id: 2, content: \"odrobiƒá zaleg≈Ço≈õci w nauce\", done: false },\n];\n\nconst hideCompletedTasks = true;\n\n\nfunction App() {\n  return (\n    <Container>\n      <Main\n      headerH1=\"Lista zada≈Ñ\"\n      buttonsHeaderH2=\"Dodaj nowe zadanie\"\n      headerForm={<Form />}\n      paragraphButtons={<Buttons tasks={tasks} hideCompletedTasks={hideCompletedTasks} />}\n      listHeaderH2=\"Lista zada≈Ñ\"\n      paragraphList={<Tasks tasks={tasks} hideCompletedTasks={hideCompletedTasks} />}\n    />\n    </Container>\n\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}